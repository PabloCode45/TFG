/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.21
 * Generated at: 2022-06-01 15:55:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class actualizar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write(".item1 { grid-area: header; }\r\n");
      out.write(".item2 { grid-area: menu; }\r\n");
      out.write(".item3 { grid-area: main; }\r\n");
      out.write(".item4 { grid-area: right; }\r\n");
      out.write(".item5 { grid-area: footer; }\r\n");
      out.write("\r\n");
      out.write(".grid-container {\r\n");
      out.write("  display: grid;\r\n");
      out.write("  grid-template-areas:\r\n");
      out.write("    'header header header header header header'\r\n");
      out.write("    'main main main main main main'\r\n");
      out.write("    'footer footer footer footer footer footer';\r\n");
      out.write("  gap: 10px;\r\n");
      out.write("  background-color: #2196F3;\r\n");
      out.write("  padding: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".grid-container > div {\r\n");
      out.write("  background-color: rgba(255, 255, 255, 0.8);\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  padding: 20px 0;\r\n");
      out.write("  font-size: 30px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"grid-container\">\r\n");
      out.write("	<div class=\"item1\">Actualizar a una persona</div>\r\n");
      out.write("	<div class=\"item3\">\r\n");
      out.write("			<form action=\"MainController\" method=\"get\" name=myform id=\"myform\">\r\n");
      out.write("			<section id=\"sectionText\">\r\n");
      out.write("					<p>Datos de la persona a actualizar</p><br>\r\n");
      out.write("					<input type=text placeholder=\"Nombre...\" name=nombre onkeyup=\"enableButton(this)\">\r\n");
      out.write("					<input type=text placeholder=\"Apellidos...\" name=apellidos onkeyup=\"enableButton(this)\"><br><br>\r\n");
      out.write("					<p>Nuevos datos</p><br>\r\n");
      out.write("					<input type=text placeholder=\"Nombre...\" name=nombreNuevo onkeyup=\"enableButton(this)\">\r\n");
      out.write("					<input type=text placeholder=\"Apellidos...\" name=apellidosNuevo onkeyup=\"enableButton(this)\"><br>\r\n");
      out.write("			</section>\r\n");
      out.write("			<br><br>\r\n");
      out.write("			<input type=\"submit\" id=\"Actualizar\" name=action value=\"ACTUALIZAR\" disabled=\"disabled\">\r\n");
      out.write("		</form>	\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	    function enableButton() {\r\n");
      out.write("	        document.getElementById(\"Buscar\").disabled=false;\r\n");
      out.write("	        \r\n");
      out.write("	    }\r\n");
      out.write("	</script>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"item5\">\r\n");
      out.write("	<a href=\"MainController?action=GOBACK\">Volver al menú</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	    function enableButton() {\r\n");
      out.write("			/* if(texto.value.trim().length>0){\r\n");
      out.write("				document.getElementById(\"Crear\").disabled=false;\r\n");
      out.write("			}else{\r\n");
      out.write("				document.getElementById(\"Crear\").disabled=true;	\r\n");
      out.write("			}\r\n");
      out.write("	         */	         \r\n");
      out.write("	         let elements=sectionText.childNodes;\r\n");
      out.write("	         let tamaño=0;\r\n");
      out.write("	         \r\n");
      out.write("	         for(let i=0;i<elements.length;i++){\r\n");
      out.write("	        	if(elements[i].type==\"text\"){\r\n");
      out.write("		        	if(elements[i].value.trim().length>0){\r\n");
      out.write("						tamaño++;\r\n");
      out.write("			        }\r\n");
      out.write("	         	}\r\n");
      out.write("		     }\r\n");
      out.write("	         if(tamaño==4){\r\n");
      out.write("	        	 document.getElementById(\"Actualizar\").disabled=false;\r\n");
      out.write("				}else{\r\n");
      out.write("					document.getElementById(\"Actualizar\").disabled=true;	\r\n");
      out.write("				}\r\n");
      out.write("	    }\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
